#include <iostream>
template <class T>
class Tree
{
public:
	struct Node
	{
		T data;
		Node* right;
		Node* left;
		Node(const T& data_, Node* right_ = nullptr, Node* left_ = nullptr) : data{ data_ }, right{ right_ }, left{ left_ }{};
	};
private:
	Node* root;
public:
	Tree() :root{ nullptr } {};
	//void add(const T& data)
	//{
	//	if (!root)
	//	{
	//		root = new Node{ data };
	//	}
	//	else
	//	{
	//		Add(data, root);
	//	}
	//}
	//bool search(const T& data)
	//{
	//	if (!root)
	//	{
	//		return false;
	//	}
	//	else
	//	{
	//		return Search(data, root);
	//	}
	//}
	//friend void Add(const T& data, Node* n)
	//{
	//	if (n->data > data)
	//	{
	//		if (n->left)
	//		{
	//			Add(data, n->left);
	//		}
	//		else
	//		{
	//			n->left = new Node{ data };
	//		}
	//	}
	//	if (n->data < data)
	//	{
	//		if (n->right)
	//		{
	//			Add(data, n->right);
	//		}
	//		else
	//		{
	//			n->right = new Node{ data };
	//		}
	//	}
	//}
	//friend bool Search(const T& data, Node* n)
	//{
	//	if (n->data == data)
	//	{
	//		return true;
	//	}
	//	if (n->data > data)
	//	{
	//		if (n->left)
	//		{
	//			return Search(data, n->left);
	//		}
	//		else
	//		{
	//			return false;
	//		}
	//	}
	//	if (n->data < data)
	//	{
	//		if (n->right)
	//		{
	//			return Search(data, n->right);
	//		}
	//		else
	//		{
	//			return false;
	//		}
	//	}
	//}
	//Node* get(T& data)
	//{
	//	if (n->data == data)
	//	{
	//		return n;
	//	}
	//	if (n->data > data)
	//	{
	//		if (n->left)
	//		{
	//			return Search(data, n->left);
	//		}
	//	}
	//	if (n->data < data)
	//	{
	//		if (n->right)
	//		{
	//			return Search(data, n->right);
	//		
	//	}
	//}
	void Add(const T& data)
	{
		if (!root)
		{
			root = new Node{ data };
			return;
		}
		Node* copy = root;
		while (1)
		{
			if (copy->data > data)
			{
				if (!copy->left)
				{
					copy->left = new Node{ data };
					break;
				}
				else
				{
					copy = copy->left;
				}
			}
			if (copy->data < data)
			{
				if (!copy->right)
				{
					copy->right = new Node{ data };
					break;
				}
				else
				{
					copy = copy->right;
				}
			}
			if (copy->data == data)
			{
				return;
			}
		}
	}
	bool SearchBool(const T& data)
	{
		if (get(data))
		{
			return true;
		}
		return false;
	}
	Node* get(const T& data)const
	{
		if (!root)
		{
			return root;
		}
		Node* copy = root;
		while (1)
		{
			if (copy->data > data)
			{
				if (!copy->left)
				{
					return copy->left;
				}
				else
				{
					copy = copy->left;
				}
			}
			if (copy->data < data)
			{
				if (!copy->right)
				{
					return copy->left;
				}
				else
				{
					copy = copy->right;
				}
			}
			if (copy->data == data)
			{
				return copy;
			}
		}
	}
};

class Car
{
	int carNum;
	std::string str;
};
